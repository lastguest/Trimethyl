Ext.data.JsonP.Q["return"]({"tagname":"class","name":"Q[\"return\"]","autodetected":{},"files":[{"filename":"q.js","href":"q.html#Q[\"return\"]"}],"params":[{"tagname":"params","name":"value","doc":"<p>the return value for the surrounding generator</p>\n"}],"throws":[{"type":"Object","doc":"<p>ReturnValue exception with the value.\n@example\n// ES6 style\nQ.async(function* () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     return foo + bar;\n})\n// Older SpiderMonkey style\nQ.async(function () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     Q.return(foo + bar);\n})</p>\n","html_type":"Object"}],"members":[{"name":"","tagname":"method","owner":"Q[\"return\"]","id":"method-","meta":{}},{"name":"del","tagname":"method","owner":"Q[\"return\"]","id":"method-del","meta":{}},{"name":"dispatch","tagname":"method","owner":"Q[\"return\"]","id":"method-dispatch","meta":{}},{"name":"fapply","tagname":"method","owner":"Q[\"return\"]","id":"method-fapply","meta":{}},{"name":"get","tagname":"method","owner":"Q[\"return\"]","id":"method-get","meta":{}},{"name":"promised","tagname":"method","owner":"Q[\"return\"]","id":"method-promised","meta":{}},{"name":"send","tagname":"method","owner":"Q[\"return\"]","id":"method-send","meta":{}},{"name":"set","tagname":"method","owner":"Q[\"return\"]","id":"method-set","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Q[\"return\"]","short_doc":"Throws a ReturnValue exception to stop an asynchronous generator. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/q.html#Q[\"return\"]' target='_blank'>q.js</a></div></pre><div class='doc-contents'><p>Throws a ReturnValue exception to stop an asynchronous generator.</p>\n\n<p>This interface is a stop-gap measure to support generator return\nvalues in older Firefox/SpiderMonkey.  In browsers that support ES6\ngenerators like Chromium 29, just use \"return\" in your generator\nfunctions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : <div class='sub-desc'><p>the return value for the surrounding generator</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReturnValue exception with the value.\n@example\n// ES6 style\nQ.async(function* () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     return foo + bar;\n})\n// Older SpiderMonkey style\nQ.async(function () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     Q.return(foo + bar);\n})</p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-' class='name expandable'></a>( <span class='pre'>object, name, value</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Invokes a method in a future turn. ...</div><div class='long'><p>Invokes a method in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for target object</p>\n</div></li><li><span class='pre'>name</span> : Object<div class='sub-desc'><p>name of method to invoke</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>a value to post, typically an array of\n                 invocation arguments for promises that\n                 are ultimately backed with <code>resolve</code> values,\n                 as opposed to those backed with URLs\n                 wherein the posted value can be any\n                 JSON serializable object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>promise for the return value</p>\n</div></li></ul></div></div></div><div id='method-del' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-del' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-del' class='name expandable'>del</a>( <span class='pre'>object, name</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a property in a future turn. ...</div><div class='long'><p>Deletes a property in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for target object</p>\n</div></li><li><span class='pre'>name</span> : Object<div class='sub-desc'><p>name of property to delete</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>promise for the return value</p>\n</div></li></ul></div></div></div><div id='method-dispatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-dispatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-dispatch' class='name expandable'>dispatch</a>( <span class='pre'>object, op, args</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>sends a message to a value in a future turn ...</div><div class='long'><p>sends a message to a value in a future turn</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><ul>\n<li>the recipient</li>\n</ul>\n\n</div></li><li><span class='pre'>op</span> : Object<div class='sub-desc'><p>the name of the message operation, e.g., \"when\",</p>\n</div></li><li><span class='pre'>args</span> : Object<div class='sub-desc'><p>further arguments to be forwarded to the operation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>result {Promise} a promise for the result of the operation</p>\n</div></li></ul></div></div></div><div id='method-fapply' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-fapply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-fapply' class='name expandable'>fapply</a>( <span class='pre'>object, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Applies the promised function in a future turn. ...</div><div class='long'><p>Applies the promised function in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for target function</p>\n</div></li><li><span class='pre'>args</span> : Object<div class='sub-desc'><p>array of application arguments</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-get' class='name expandable'>get</a>( <span class='pre'>object, name</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of a property in a future turn. ...</div><div class='long'><p>Gets the value of a property in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for target object</p>\n</div></li><li><span class='pre'>name</span> : Object<div class='sub-desc'><p>name of property to get</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>promise for the property value</p>\n</div></li></ul></div></div></div><div id='method-promised' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-promised' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-promised' class='name expandable'>promised</a>( <span class='pre'>callback</span> ) : function<span class=\"signature\"></span></div><div class='description'><div class='short'>The promised function decorator ensures that any promise arguments\nare settled and passed as values (this is also set...</div><div class='long'><p>The promised function decorator ensures that any promise arguments\nare settled and passed as values (<code>this</code> is also settled and passed\nas a value).  It will also ensure that the result of a function is\nalways a promise.</p>\n\n<p>@example\nvar add = Q.promised(function (a, b) {\n    return a + b;\n});\nadd(Q(a), Q(B));</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : function<div class='sub-desc'><p>The function to decorate</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>function</span><div class='sub-desc'><p>a function that has been decorated.</p>\n</div></li></ul></div></div></div><div id='method-send' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-send' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-send' class='name expandable'>send</a>( <span class='pre'>object, name, </span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Invokes a method in a future turn. ...</div><div class='long'><p>Invokes a method in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for target object</p>\n</div></li><li><span class='pre'>name</span> : Object<div class='sub-desc'><p>name of method to invoke</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p>...args   array of invocation arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>promise for the return value</p>\n</div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Q[\"return\"]'>Q[\"return\"]</span><br/><a href='source/q.html#Q[\"return\"]-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Q[\"return\"]-method-set' class='name expandable'>set</a>( <span class='pre'>object, name, value</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a property in a future turn. ...</div><div class='long'><p>Sets the value of a property in a future turn.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>promise or immediate reference for object object</p>\n</div></li><li><span class='pre'>name</span> : Object<div class='sub-desc'><p>name of property to set</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>new value of property</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>promise for the return value</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});